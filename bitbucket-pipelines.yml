# REQUESTED ENVIRONMENT VARIABLES:
# - AWS_ACCESS_KEY_ID
# - AWS_SECRET_ACCESS_KEY
# - AWS_DEFAULT_REGION
# - ECR_HOST
# - ECR_REPO_NAME
# - ECR_CLUSTER_NAME

image: docker:stable
options:
  docker: true
pipelines:
  branches: #To auto run based on branch push
    develop:
      - step:
          name: Build complete app, and run tests
          script:
              # Build our application
              - docker build --target builder -t devops-task:test .

              # Run unit-tests
              - docker run devops-task:test npm test
    master:
      - step:
          name: Build complete app, and run tests
          script:
              # Build our application
              - docker build --target builder -t devops-task:test .
              # Run unit-tests
              - docker run devops-task:test npm test
      - step:
          name: Build and publish docker image to AWS ECR repository.
          script:
              # Install aws-cli
              - apk update && apk upgrade
              - apk -v --update add python2 py2-pip groff
              - pip install --upgrade awscli==1.14.5
              
              # Build application for production
              - docker build --target production -t devops-task .

              # After the build completes, tag the image so we can push the image to our ECR repository
              - docker tag devops-task:latest ${ECR_HOST}/${ECR_REPO_NAME}:${BITBUCKET_BUILD_NUMBER}
              
              
              # Login to the ECR via the aws script
              - $(aws ecr get-login --no-include-email --region eu-west-1)

              # Push the docker image to ECR
              - docker push "${ECR_HOST}/${ECR_REPO_NAME}:${BITBUCKET_BUILD_NUMBER}"
      - step:
          name: Deploy to ECS
          script:
              # Install dependencies
              - apk update && apk upgrade
              - apk -v --update add curl gettext

              # Replace the docker image name in the docker-compose-aws.yml with the newly pushed image.
              - envsubst < docker-compose-template.yml >  docker-compose-aws.yml

              # Install AWS ECS-cli
              - curl -o /usr/local/bin/ecs-cli https://amazon-ecs-cli.s3.amazonaws.com/ecs-cli-linux-amd64-latest
              - curl -o ecs-cli.asc https://amazon-ecs-cli.s3.amazonaws.com/ecs-cli-linux-amd64-latest.asc
              - chmod +x /usr/local/bin/ecs-cli
              
              # Check the ecs-cli version
              - ecs-cli --version

              # Deploy the updated docker compose to ECS using our docker-compose file
              - ecs-cli compose --file "docker-compose-aws.yml" --cluster "${ECR_CLUSTER_NAME}" --ecs-params "ecs-params.yml" service up --deployment-min-healthy-percent 0 --deployment-max-percent 100